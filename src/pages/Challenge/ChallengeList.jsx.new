import { useState, useRef, useEffect } from "react";
import { DateRange } from "react-date-range";
import { addDays } from "date-fns";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import ChallengeDetail from "./ChallengeDetail";
import { getAllChallenges, joinChallenge } from "../../api/challenge";
import { toast } from "react-toastify";

const IMAGE_URL =
  "https://friendshipcakes.com/wp-content/uploads/2023/05/banh-tao-hinh-21.jpg";

function parseDate(str) {
  try {
    if (!str) return null;
    // Nếu str là ISO date string
    if (str.includes('T')) {
      return new Date(str);
    }
    // Nếu str là dd/mm/yyyy format
    const [d, m, y] = str.split("/");
    return new Date(`${y}-${m}-${d}`);
  } catch (error) {
    console.error("Error parsing date:", error);
    return null;
  }
}

function formatDate(dateString) {
  try {
    const date = new Date(dateString);
    return `${date.getDate().toString().padStart(2, "0")}/${(date.getMonth() + 1)
      .toString()
      .padStart(2, "0")}/${date.getFullYear()}`;
  } catch (error) {
    console.error("Error formatting date:", error);
    return "";
  }
}

export default function ChallengeList() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("Tất cả");
  const [selectedChallenge, setSelectedChallenge] = useState(null);
  const [showDateFilter, setShowDateFilter] = useState(false);
  const [dateRange, setDateRange] = useState({
    startDate: null,
    endDate: null,
    key: "selection",
  });
  const [challenges, setChallenges] = useState([]);
  const [loading, setLoading] = useState(false);
  const filterRef = useRef(null);

  useEffect(() => {
    const fetchChallenges = async () => {
      try {
        setLoading(true);
        // Mặc định hiển thị dữ liệu mẫu
        setChallenges(placeholderChallenges);
        
        // Gọi API
        const result = await getAllChallenges();
        console.log("API Result:", result);

        if (result.success && result.challenges?.length > 0) {
          const formattedChallenges = result.challenges.map((challenge) => ({
            id: challenge._id || challenge.id,
            title: challenge.title || "Untitled Challenge",
            description: challenge.description || "",
            image: challenge.image_url || IMAGE_URL,
            participants: challenge.participants_count || 0,
            duration: `${challenge.duration || 30} ngày`,
            difficulty: challenge.difficulty || "Trung bình",
            prize: challenge.prize_description || "",
            status: challenge.status || getStatusFromDates(challenge.start_date, challenge.end_date),
            startDate: formatDate(challenge.start_date),
            endDate: formatDate(challenge.end_date),
            host: {
              name: challenge.host?.name || "Admin",
              avatar: challenge.host?.avatar || IMAGE_URL,
            },
            tags: challenge.hashtags || [],
          }));

          console.log("Formatted Challenges:", formattedChallenges);
          setChallenges(formattedChallenges);
        } else if (!result.success) {
          toast.error(result.error || "Không thể tải danh sách thử thách");
        }
      } catch (error) {
        console.error("Error fetching challenges:", error);
        toast.error("Đang hiển thị dữ liệu mẫu do không thể kết nối với server");
      } finally {
        setLoading(false);
      }
    };

    fetchChallenges();
  }, []);

  const getStatusFromDates = (startDate, endDate) => {
    if (!startDate || !endDate) return "Đang diễn ra";
    const now = new Date();
    const start = new Date(startDate);
    const end = new Date(endDate);

    if (now < start) return "Sắp diễn ra";
    if (now > end) return "Đã kết thúc";
    return "Đang diễn ra";
  };

  // Rest of your existing code...
  // Keep all the existing UI code and helper functions
