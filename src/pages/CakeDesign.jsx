import { useState, useEffect } from "react";
import { Download, RotateCcw, Sparkles, Save } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-hot-toast";

// Import cake design assets
const CakeDesign = () => {
  // Design state
  const [design, setDesign] = useState({
    shape: "Round",
    tiers: 3,
    frosting: "none",
    topping: "none",
    decorations: {},
  });

  // Drag & drop positions state
  const [toppingPosition, setToppingPosition] = useState({ x: 0, y: -40 });
  const [toppingScale, setToppingScale] = useState(1); // Scale cho topping
  const [decorationsPositions, setDecorationsPositions] = useState({});
  const [decorationsScales, setDecorationsScales] = useState({}); // Scale cho t·ª´ng decoration
  const [isDragging, setIsDragging] = useState(false);
  const [currentDraggingItem, setCurrentDraggingItem] = useState(null);

  // UI state
  const [selectedTab, setSelectedTab] = useState("Base");
  const [isAnimating, setIsAnimating] = useState(false);
  const [diameter, setDiameter] = useState(25);
  const [height, setHeight] = useState(15);
  const [width, setWidth] = useState(20);
  const [selectedFlavors, setSelectedFlavors] = useState(["Vanilla"]);
  const navigate = useNavigate();

  // Available design options
  const shapes = ["Round", "Square", "Heart"]; // Removed Rect as it's not in the image assets
  const tiers = [1, 2, 3];
  const flavors = ["Vanilla", "Chocolate", "Lemon", "Red Velvet"];
  const frostings = ["none", "Buttercream", "Ganache", "Matcha"];
  const toppings = [
    "none",
    "Strawberries",
    "Chocolate Chips",
    "Sprinkles",
    "Nuts",
  ];
  const designOptions = ["Base", "Frosting", "Toppings", "Decor"];

  // Decoration options
  const decorations = [
    {
      value: "CakeCandle",
      label: "Candles üïØÔ∏è",
      filename: "CakeCandle.png",
    },
    {
      value: "Flower",
      label: "Flowers üå∏",
      filename: "Flower.png",
    },
    {
      value: "happy birthday",
      label: "Happy Birthday üéÇ",
      filename: "happy birthday.png",
    },
    {
      value: "figurine 1",
      label: "Figurine 1 üé≠",
      filename: "figurine 1.png",
    },
    {
      value: "figurine 2",
      label: "Figurine 2 üé≠",
      filename: "figurine 2.png",
    },
    {
      value: "ribbon 1",
      label: "Ribbon 1 üéÄ",
      filename: "ribbon 1.png",
    },
    {
      value: "ribbon 2",
      label: "Ribbon 2 üéÄ",
      filename: "ribbon 2.png",
    },
    {
      value: "pearl 1",
      label: "Pearl 1 ‚ö™",
      filename: "pearl 1.png",
    },
    {
      value: "pearl 2",
      label: "Pearl 2 ‚ö™",
      filename: "pearl 2.png",
    },
  ];

  // Update design with animation
  const updateDesign = (updates) => {
    setIsAnimating(true);
    setDesign((prev) => ({ ...prev, ...updates }));

    // ƒê·∫∑t l·∫°i v·ªã tr√≠ topping khi thay ƒë·ªïi lo·∫°i topping
    if ("topping" in updates) {
      setToppingPosition({ x: 0, y: -40 });
    }

    setTimeout(() => setIsAnimating(false), 300);
  };

  // Reset design
  const resetDesign = () => {
    setDesign({
      shape: "Round",
      tiers: 3,
      frosting: "none",
      topping: "none",
      decorations: {},
    });
    setToppingPosition({ x: 0, y: -40 }); // ƒê·∫∑t l·∫°i v·ªã tr√≠ topping
    setToppingScale(1); // ƒê·∫∑t l·∫°i k√≠ch th∆∞·ªõc topping
    setDecorationsPositions({}); // ƒê·∫∑t l·∫°i v·ªã tr√≠ c√°c decorations
    setDecorationsScales({}); // ƒê·∫∑t l·∫°i k√≠ch th∆∞·ªõc c√°c decorations
  };

  // Toggle flavor selection
  const toggleFlavor = (flavor) => {
    setSelectedFlavors((prev) =>
      prev.includes(flavor)
        ? prev.filter((f) => f !== flavor)
        : [...prev, flavor]
    );
  };

  // Helper function to get image paths based on design selections
  const getImagePath = () => {
    // Base cake or frosting image - m·ªôt ·∫£nh duy nh·∫•t
    let baseOrFrostingImage;
    if (design.frosting !== "none") {
      baseOrFrostingImage = `${process.env.PUBLIC_URL}/Cake Design/Base Frosting/Tier ${design.tiers} ${design.shape} ${design.frosting}.png`;
    } else {
      baseOrFrostingImage = `${process.env.PUBLIC_URL}/Cake Design/Base Cake Layer/Tier ${design.tiers} ${design.shape}.png`;
    }

    // Topping layer
    let toppingImage = null;
    if (design.topping !== "none") {
      toppingImage = `${process.env.PUBLIC_URL}/Cake Design/Base Topping/${design.topping}.png`;
    }

    return {
      baseOrFrosting: baseOrFrostingImage,
      topping: toppingImage,
    };
  };

  // Handle decoration toggle with position tracking and quantities
  const toggleDecoration = (decoration) => {
    setDesign((prev) => {
      const decorationsObj = { ...prev.decorations };

      if (!decorationsObj[decoration]) {
        // Th√™m decoration m·ªõi v·ªõi s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1
        decorationsObj[decoration] = 1;

        // Th√™m v·ªã tr√≠ ban ƒë·∫ßu ng·∫´u nhi√™n cho decoration m·ªõi
        setDecorationsPositions((prevPositions) => ({
          ...prevPositions,
          [`${decoration}_0`]: {
            x: Math.random() * 50 - 25, // Random t·ª´ -25 ƒë·∫øn 25
            y: Math.random() * 40 - 60, // Random t·ª´ -60 ƒë·∫øn -20
          },
        }));

        // Th√™m k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh cho decoration m·ªõi
        setDecorationsScales((prevScales) => ({
          ...prevScales,
          [`${decoration}_0`]: 1, // K√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh l√† 1
        }));
      } else {
        // X√≥a decoration
        delete decorationsObj[decoration];

        // X√≥a t·∫•t c·∫£ v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc cho decoration n√†y
        setDecorationsPositions((prevPositions) => {
          const updatedPositions = { ...prevPositions };
          Object.keys(updatedPositions).forEach((key) => {
            if (key.startsWith(`${decoration}_`)) {
              delete updatedPositions[key];
            }
          });
          return updatedPositions;
        });

        setDecorationsScales((prevScales) => {
          const updatedScales = { ...prevScales };
          Object.keys(updatedScales).forEach((key) => {
            if (key.startsWith(`${decoration}_`)) {
              delete updatedScales[key];
            }
          });
          return updatedScales;
        });
      }

      return { ...prev, decorations: decorationsObj };
    });
  };

  // Update decoration quantity
  const updateDecorationQuantity = (decoration, quantity) => {
    const newQuantity = Math.max(1, Math.min(10, quantity)); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t·ª´ 1-10

    setDesign((prev) => {
      const decorationsObj = { ...prev.decorations };
      const oldQuantity = decorationsObj[decoration] || 0;
      decorationsObj[decoration] = newQuantity;

      // C·∫≠p nh·∫≠t v·ªã tr√≠ cho c√°c decoration
      setDecorationsPositions((prevPositions) => {
        const updatedPositions = { ...prevPositions };

        // N·∫øu tƒÉng s·ªë l∆∞·ª£ng, th√™m v·ªã tr√≠ cho c√°c decoration m·ªõi
        if (newQuantity > oldQuantity) {
          for (let i = oldQuantity; i < newQuantity; i++) {
            updatedPositions[`${decoration}_${i}`] = {
              x: Math.random() * 50 - 25,
              y: Math.random() * 40 - 60,
            };
          }
        }
        // N·∫øu gi·∫£m s·ªë l∆∞·ª£ng, x√≥a v·ªã tr√≠ c·ªßa c√°c decoration th·ª´a
        else if (newQuantity < oldQuantity) {
          for (let i = newQuantity; i < oldQuantity; i++) {
            delete updatedPositions[`${decoration}_${i}`];
          }
        }

        return updatedPositions;
      });

      // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc cho c√°c decoration
      setDecorationsScales((prevScales) => {
        const updatedScales = { ...prevScales };

        // N·∫øu tƒÉng s·ªë l∆∞·ª£ng, th√™m k√≠ch th∆∞·ªõc cho c√°c decoration m·ªõi
        if (newQuantity > oldQuantity) {
          for (let i = oldQuantity; i < newQuantity; i++) {
            updatedScales[`${decoration}_${i}`] = 1; // K√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh
          }
        }
        // N·∫øu gi·∫£m s·ªë l∆∞·ª£ng, x√≥a k√≠ch th∆∞·ªõc c·ªßa c√°c decoration th·ª´a
        else if (newQuantity < oldQuantity) {
          for (let i = newQuantity; i < oldQuantity; i++) {
            delete updatedScales[`${decoration}_${i}`];
          }
        }

        return updatedScales;
      });

      return { ...prev, decorations: decorationsObj };
    });
  };

  // Save cake design
  const saveDesign = () => {
    toast.success("Design saved successfully!");
  };

  // Export cake design
  const exportDesign = () => {
    toast.success("Design exported!");
  };

  // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc cho topping
  const updateToppingScale = (scale) => {
    setToppingScale(Math.max(0.2, Math.min(2.0, scale))); // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ª´ 0.2 ƒë·∫øn 2.0
  };

  // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc cho decoration
  const updateDecorationScale = (decorationKey, scale) => {
    setDecorationsScales((prev) => ({
      ...prev,
      [decorationKey]: Math.max(0.2, Math.min(2.0, scale)), // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ª´ 0.2 ƒë·∫øn 2.0
    }));
  };

  // Generic drag and drop handlers for toppings and decorations
  const handleDragStart =
    (itemType, itemValue = null) =>
    (e) => {
      setIsDragging(true);
      setCurrentDraggingItem({ type: itemType, value: itemValue });

      // N·∫øu s·ª≠ d·ª•ng e.dataTransfer, th√™m d√≤ng sau ƒë·ªÉ ƒë·∫∑t d·ªØ li·ªáu c·∫ßn thi·∫øt cho k√©o th·∫£
      if (e.dataTransfer) {
        e.dataTransfer.setData("text/plain", itemType);
      }

      // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
      if (e.preventDefault) e.preventDefault();
    };

  const handleDrag = (e) => {
    if (!isDragging || !currentDraggingItem) return;

    // T√≠nh to√°n v·ªã tr√≠ m·ªõi d·ª±a tr√™n s·ª± di chuy·ªÉn c·ªßa chu·ªôt/ng√≥n tay
    const containerRect = e.target.parentElement.getBoundingClientRect();

    // M·ªü r·ªông ph·∫°m vi k√©o th·∫£ - nh√¢n v·ªõi h·ªá s·ªë 3 ƒë·ªÉ c√≥ v√πng k√©o th·∫£ r·ªông h∆°n
    const x =
      ((e.clientX - containerRect.left) / containerRect.width) * 300 - 150;
    const y =
      ((e.clientY - containerRect.top) / containerRect.height) * 300 - 150;

    // Cho ph√©p k√©o th·∫£ t·ª± do trong ph·∫°m vi m·ªü r·ªông
    if (currentDraggingItem.type === "topping") {
      setToppingPosition({ x: x, y: y });
    } else if (currentDraggingItem.type === "decoration") {
      setDecorationsPositions((prev) => ({
        ...prev,
        [currentDraggingItem.value]: { x: x, y: y },
      }));
    }
  };

  const handleDragEnd = () => {
    setIsDragging(false);
    setCurrentDraggingItem(null);
  };

  const handleTouchMove = (e) => {
    if (!isDragging || !currentDraggingItem) return;

    // X·ª≠ l√Ω s·ª± ki·ªán touch cho thi·∫øt b·ªã di ƒë·ªông
    const touch = e.touches[0];
    const containerRect = e.target.parentElement.getBoundingClientRect();

    // M·ªü r·ªông ph·∫°m vi k√©o th·∫£ - nh√¢n v·ªõi h·ªá s·ªë 3 ƒë·ªÉ c√≥ v√πng k√©o th·∫£ r·ªông h∆°n
    const x =
      ((touch.clientX - containerRect.left) / containerRect.width) * 300 - 150;
    const y =
      ((touch.clientY - containerRect.top) / containerRect.height) * 300 - 150;

    // Cho ph√©p k√©o th·∫£ t·ª± do trong ph·∫°m vi m·ªü r·ªông
    if (currentDraggingItem.type === "topping") {
      setToppingPosition({ x: x, y: y });
    } else if (currentDraggingItem.type === "decoration") {
      setDecorationsPositions((prev) => ({
        ...prev,
        [currentDraggingItem.value]: { x: x, y: y },
      }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-white to-yellow-50">
      {/* Top Navigation */}
      <header className="bg-white/90 backdrop-blur-sm border-b border-pink-100 px-6 py-4 sticky top-0 z-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-pink-400 to-yellow-400 rounded-xl flex items-center justify-center">
              <span className="text-white text-xl">üéÇ</span>
            </div>
            <h1 className="text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-500 bg-clip-text text-transparent">
              Cake Design Studio
            </h1>
          </div>

          <div className="flex items-center gap-3">
            <button
              className="px-4 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
              onClick={resetDesign}
            >
              <RotateCcw className="w-4 h-4 mr-2 inline" />
              Reset
            </button>
            <button
              className="px-4 py-2 border border-pink-200 text-pink-600 rounded-lg text-sm hover:bg-pink-50"
              onClick={saveDesign}
            >
              <Save className="w-4 h-4 mr-2 inline" />
              Save
            </button>
            <button
              className="px-4 py-2 border border-pink-200 text-pink-600 rounded-lg text-sm hover:bg-pink-50"
              onClick={exportDesign}
            >
              <Download className="w-4 h-4 mr-2 inline" />
              Export
            </button>
            <button
              className="px-4 py-2 bg-gradient-to-r from-pink-400 to-purple-400 text-white rounded-lg font-semibold shadow hover:from-pink-500 hover:to-purple-500 transition-all duration-200"
              onClick={() => navigate("/ai-generated-images")}
            >
              <Sparkles className="w-4 h-4 mr-2 inline" />
              AI Generation
            </button>
          </div>
        </div>
      </header>

      <div className="p-3 max-w-[1400px] mx-auto">
        <div className="flex flex-col lg:flex-row gap-4">
          {/* Cake Preview Area */}
          <div className="flex-1">
            <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-3 h-[750px]">
              {/* Cake Preview */}
              <div
                className={`h-full transition-all duration-300 flex justify-center items-center ${
                  isAnimating ? "scale-95 opacity-80" : "scale-100 opacity-100"
                }`}
              >
                <div className="relative w-full h-full flex items-center justify-center bg-gradient-to-br from-pink-50 via-white to-yellow-50 rounded-2xl overflow-hidden">
                  {/* Background pattern */}
                  <div className="absolute inset-0 opacity-10">
                    <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,182,193,0.3),transparent_50%)]"></div>
                  </div>

                  {/* Cake visualization */}
                  <div className="relative w-[550px] h-[550px] transition-all duration-500 ease-in-out transform hover:scale-105">
                    {/* Base cake or Frosting cake - hi·ªÉn th·ªã m·ªôt ·∫£nh duy nh·∫•t */}
                    <div className="absolute inset-0 flex items-center justify-center">
                      <img
                        src={
                          design.frosting !== "none"
                            ? `/Cake Design/Base Frosting/Tier ${design.tiers} ${design.shape} ${design.frosting}.png`
                            : `/Cake Design/Base Cake Layer/Tier ${design.tiers} ${design.shape}.png`
                        }
                        alt={
                          design.frosting !== "none"
                            ? `${design.shape} ${design.tiers}-tier cake with ${design.frosting} frosting`
                            : `${design.shape} ${design.tiers}-tier cake`
                        }
                        className="w-full h-full object-contain"
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.style.display = "none";
                        }}
                      />
                    </div>

                    {/* Topping overlay if selected - with drag & drop */}
                    {design.topping !== "none" && (
                      <div
                        className="absolute inset-0 flex items-center justify-center pointer-events-none"
                        style={{
                          zIndex: 15,
                        }}
                      >
                        <img
                          src={`/Cake Design/Base Topping/${design.topping}.png`}
                          alt={`${design.topping} topping`}
                          className={`w-full h-full object-contain transition-transform pointer-events-auto ${
                            isDragging &&
                            currentDraggingItem?.type === "topping"
                              ? "z-20"
                              : "z-10"
                          }`}
                          onMouseDown={handleDragStart("topping")}
                          onMouseMove={handleDrag}
                          onMouseUp={handleDragEnd}
                          onMouseLeave={handleDragEnd}
                          onTouchStart={handleDragStart("topping")}
                          onTouchMove={handleTouchMove}
                          onTouchEnd={handleDragEnd}
                          style={{
                            transform: `
                              scale(${
                                (design.topping === "Strawberries"
                                  ? design.tiers === 1
                                    ? 0.55
                                    : design.tiers === 2
                                    ? 0.45
                                    : 0.35
                                  : design.topping === "Nuts"
                                  ? design.tiers === 1
                                    ? 0.6
                                    : design.tiers === 2
                                    ? 0.5
                                    : 0.4
                                  : design.tiers === 1
                                  ? 0.75
                                  : design.tiers === 2
                                  ? 0.65
                                  : 0.55) * toppingScale
                              })
                              translate(${toppingPosition.x}%, ${
                              toppingPosition.y
                            }%)
                            `,
                            position: "relative",
                            cursor:
                              isDragging &&
                              currentDraggingItem?.type === "topping"
                                ? "grabbing"
                                : "grab",
                            filter:
                              isDragging &&
                              currentDraggingItem?.type === "topping"
                                ? "brightness(1.1)"
                                : "none",
                          }}
                          onError={(e) => {
                            e.target.onerror = null;
                            e.target.style.display = "none";
                          }}
                          draggable="false" // T·∫Øt h√†nh vi k√©o th·∫£ m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
                        />
                      </div>
                    )}

                    {/* Decorations Overlay - with drag & drop */}
                    {Object.entries(design.decorations).flatMap(
                      ([decoration, quantity]) => {
                        // T√¨m th√¥ng tin decoration t·ª´ m·∫£ng decorations
                        const decorInfo = decorations.find(
                          (d) => d.value === decoration
                        );
                        if (!decorInfo) return null;

                        // T·∫°o m·∫£ng c√°c decoration instances d·ª±a theo s·ªë l∆∞·ª£ng
                        return Array.from({ length: quantity }, (_, index) => {
                          const decorKey = `${decoration}_${index}`;

                          return (
                            <div
                              key={decorKey}
                              className="absolute inset-0 flex items-center justify-center pointer-events-none"
                              style={{
                                zIndex:
                                  isDragging &&
                                  currentDraggingItem?.value === decorKey
                                    ? 20
                                    : 15, // ∆Øu ti√™n ph·∫ßn t·ª≠ ƒëang k√©o
                              }}
                            >
                              <img
                                src={`/Cake Design/Base Decoration/${decorInfo.filename}`}
                                alt={`${decorInfo.label} decoration`}
                                className={`w-full h-full object-contain transition-transform pointer-events-auto ${
                                  isDragging &&
                                  currentDraggingItem?.type === "decoration" &&
                                  currentDraggingItem?.value === decorKey
                                    ? "z-20"
                                    : "z-10"
                                }`}
                                onMouseDown={(e) =>
                                  handleDragStart("decoration", decorKey)(e)
                                }
                                onMouseMove={handleDrag}
                                onMouseUp={handleDragEnd}
                                onMouseLeave={handleDragEnd}
                                onTouchStart={(e) =>
                                  handleDragStart("decoration", decorKey)(e)
                                }
                                onTouchMove={handleTouchMove}
                                onTouchEnd={handleDragEnd}
                                style={{
                                  transform: `
                                  scale(${
                                    (design.tiers === 1
                                      ? 0.75
                                      : design.tiers === 2
                                      ? 0.65
                                      : 0.55) *
                                    (decorationsScales[decorKey] || 1)
                                  })
                                  translate(${
                                    decorationsPositions[decorKey]?.x || 0
                                  }%, ${
                                    decorationsPositions[decorKey]?.y || 0
                                  }%)
                                `,
                                  position: "relative",
                                  cursor:
                                    isDragging &&
                                    currentDraggingItem?.type ===
                                      "decoration" &&
                                    currentDraggingItem?.value === decorKey
                                      ? "grabbing"
                                      : "grab",
                                  filter:
                                    isDragging &&
                                    currentDraggingItem?.type ===
                                      "decoration" &&
                                    currentDraggingItem?.value === decorKey
                                      ? "brightness(1.1)"
                                      : "none",
                                }}
                                onError={(e) => {
                                  e.target.onerror = null;
                                  e.target.style.display = "none";
                                }}
                                draggable="false" // T·∫Øt h√†nh vi k√©o th·∫£ m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
                              />
                            </div>
                          );
                        });
                      }
                    )}

                    {/* Sparkle effect */}
                    <div className="absolute inset-0 pointer-events-none">
                      {[...Array(8)].map((_, i) => (
                        <div
                          key={i}
                          className="absolute w-2 h-2 bg-yellow-300 rounded-full animate-pulse"
                          style={{
                            top: `${10 + Math.random() * 80}%`,
                            left: `${10 + Math.random() * 80}%`,
                            animationDelay: `${i * 0.3}s`,
                            animationDuration: "2s",
                            opacity: 0.7,
                          }}
                        />
                      ))}
                    </div>

                    {/* Subtle shadow for depth */}
                    <div
                      className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-3/4 h-4 bg-black rounded-full"
                      style={{
                        filter: "blur(10px)",
                        opacity: 0.1,
                      }}
                    />
                  </div>

                  {/* Design info overlay */}
                  <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 w-5/6 max-w-lg">
                    <div className="bg-white/90 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-pink-100">
                      <div className="flex flex-col gap-2">
                        <div className="flex items-center justify-between text-sm">
                          <div className="flex items-center gap-3">
                            <span className="px-4 py-1.5 bg-gradient-to-r from-pink-100 to-pink-200 text-pink-700 rounded-full capitalize font-medium">
                              {design.shape}
                            </span>
                            <span className="px-4 py-1.5 bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-700 rounded-full font-medium">
                              {design.tiers} Tier{design.tiers > 1 ? "s" : ""}
                            </span>
                          </div>
                          <div className="text-gray-700 font-medium text-base">
                            {design.frosting !== "none" &&
                              `${design.frosting} ‚Ä¢ `}
                            {design.topping !== "none" && `${design.topping}`}
                          </div>
                        </div>
                        <div className="bg-blue-50 text-blue-600 text-xs rounded p-2 flex items-center">
                          <svg
                            className="w-4 h-4 mr-2"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth="2"
                              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                            ></path>
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth="2"
                              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                            ></path>
                          </svg>
                          <span>
                            Topping v√† Decoration c√≥ th·ªÉ ƒë∆∞·ª£c k√©o th·∫£ ch√≠nh x√°c
                            theo v√πng h√¨nh ·∫£nh! Nhi·ªÅu th√†nh ph·∫ßn c√≥ th·ªÉ ƒë∆∞·ª£c k√©o
                            th·∫£ ƒë·ªôc l·∫≠p v√† c√≥ th·ªÉ di chuy·ªÉn t·ª± do trong v√πng m·ªü
                            r·ªông.
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Design Controls */}
          <div className="w-full lg:w-96 space-y-4">
            {/* Design Options Tabs */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
              <div className="flex gap-2 mb-2">
                {designOptions.map((option) => (
                  <button
                    key={option}
                    onClick={() => setSelectedTab(option)}
                    className={`px-4 py-2 rounded-lg text-sm font-medium flex-1 ${
                      selectedTab === option
                        ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white"
                        : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                    }`}
                  >
                    {option}
                  </button>
                ))}
              </div>
            </div>

            {/* Content based on selected tab */}
            {selectedTab === "Base" && (
              <>
                {/* Cake Shape */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                  <h3 className="font-semibold text-gray-800 mb-4">
                    Cake Shape
                  </h3>
                  <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md text-xs text-blue-600">
                    <span className="flex items-center">
                      <svg
                        className="w-4 h-4 mr-1"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 110 8 4 4 0 010-8z"
                        ></path>
                      </svg>
                      Ch·ªçn h√¨nh d√°ng c∆° b·∫£n cho b√°nh c·ªßa b·∫°n
                    </span>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    {shapes.map((shape) => (
                      <button
                        key={shape}
                        onClick={() => updateDesign({ shape })}
                        className={`p-3 rounded-lg border text-sm font-medium ${
                          design.shape === shape
                            ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white border-pink-500"
                            : "bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100"
                        }`}
                      >
                        {shape}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Number of Tiers */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                  <h3 className="font-semibold text-gray-800 mb-4">
                    Number of Tiers
                  </h3>
                  <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md text-xs text-blue-600">
                    <span className="flex items-center">
                      <svg
                        className="w-4 h-4 mr-1"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 110 8 4 4 0 010-8z"
                        ></path>
                      </svg>
                      Ch·ªçn s·ªë t·∫ßng cho b√°nh c·ªßa b·∫°n
                    </span>
                  </div>
                  <div className="grid grid-cols-3 gap-2">
                    {tiers.map((tier) => (
                      <button
                        key={tier}
                        onClick={() => updateDesign({ tiers: tier })}
                        className={`p-3 rounded-lg border text-sm font-medium ${
                          design.tiers === tier
                            ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white border-pink-500"
                            : "bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100"
                        }`}
                      >
                        {tier} Tier{tier > 1 ? "s" : ""}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Size Controls */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                  <h3 className="font-semibold text-gray-800 mb-4">Size</h3>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <label className="text-sm font-medium text-gray-600">
                          Diameter
                        </label>
                        <span className="text-sm text-gray-500">
                          {diameter} Cm
                        </span>
                      </div>
                      <input
                        type="range"
                        min="10"
                        max="50"
                        value={diameter}
                        onChange={(e) =>
                          setDiameter(Number.parseInt(e.target.value))
                        }
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                      />
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <label className="text-sm font-medium text-gray-600">
                          Height
                        </label>
                        <span className="text-sm text-gray-500">
                          {height} Cm
                        </span>
                      </div>
                      <input
                        type="range"
                        min="5"
                        max="30"
                        value={height}
                        onChange={(e) =>
                          setHeight(Number.parseInt(e.target.value))
                        }
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                      />
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <label className="text-sm font-medium text-gray-600">
                          Width
                        </label>
                        <span className="text-sm text-gray-500">
                          {width} Cm
                        </span>
                      </div>
                      <input
                        type="range"
                        min="10"
                        max="40"
                        value={width}
                        onChange={(e) =>
                          setWidth(Number.parseInt(e.target.value))
                        }
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                      />
                    </div>
                  </div>
                </div>
              </>
            )}

            {selectedTab === "Frosting" && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                <h3 className="font-semibold text-gray-800 mb-4">
                  Frosting Options
                </h3>
                <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md text-xs text-blue-600">
                  <span className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 110 8 4 4 0 010-8z"
                      ></path>
                    </svg>
                    Ch·ªçn lo·∫°i frosting cho b√°nh c·ªßa b·∫°n
                  </span>
                </div>
                <div className="grid grid-cols-1 gap-2">
                  {frostings.map((frosting) => (
                    <button
                      key={frosting}
                      onClick={() => updateDesign({ frosting })}
                      className={`p-3 rounded-lg border text-sm font-medium ${
                        design.frosting === frosting
                          ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white border-pink-500"
                          : "bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100"
                      }`}
                    >
                      {frosting === "none" ? "No Frosting" : frosting}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {selectedTab === "Toppings" && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                <h3 className="font-semibold text-gray-800 mb-4">Toppings</h3>
                <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md text-xs text-blue-600">
                  <span className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 110 8 4 4 0 010-8z"
                      ></path>
                    </svg>
                    {design.topping !== "none"
                      ? "Ch·∫°m v√†o h√¨nh ·∫£nh ƒë·ªÉ k√©o th·∫£ v√† ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc topping!"
                      : "Ch·ªçn topping ƒë·ªÉ trang tr√≠ b√°nh c·ªßa b·∫°n"}
                  </span>
                </div>

                {design.topping !== "none" && (
                  <div className="mt-4 border-t border-pink-100 pt-4">
                    <div className="flex justify-between items-center mb-2">
                      <label className="text-sm font-medium text-pink-600">
                        K√≠ch th∆∞·ªõc topping
                      </label>
                      <span className="text-sm font-semibold bg-pink-100 px-2 py-1 rounded-md text-pink-700">
                        {Math.round(toppingScale * 100)}%
                      </span>
                    </div>
                    <input
                      type="range"
                      min="20"
                      max="200"
                      value={toppingScale * 100}
                      onChange={(e) =>
                        updateToppingScale(Number(e.target.value) / 100)
                      }
                      className="w-full h-3 bg-pink-100 rounded-lg appearance-none cursor-pointer accent-pink-500"
                      style={{
                        background: `linear-gradient(to right, #ec4899 0%, #ec4899 ${
                          ((toppingScale * 100 - 20) / 180) * 100
                        }%, #fce7f3 ${
                          ((toppingScale * 100 - 20) / 180) * 100
                        }%, #fce7f3 100%)`,
                      }}
                    />
                  </div>
                )}
                <div className="grid grid-cols-1 gap-2">
                  {toppings.map((topping) => (
                    <button
                      key={topping}
                      onClick={() => updateDesign({ topping })}
                      className={`p-3 rounded-lg border text-sm font-medium ${
                        design.topping === topping
                          ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white border-pink-500"
                          : "bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100"
                      }`}
                    >
                      {topping === "none" ? "No Topping" : topping}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {selectedTab === "Decor" && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                <h3 className="font-semibold text-gray-800 mb-4">
                  Decorations
                </h3>
                <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md text-xs text-blue-600">
                  <span className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 110 8 4 4 0 010-8z"
                      ></path>
                    </svg>
                    {Object.keys(design.decorations).length > 0
                      ? "Ch·∫°m v√†o t·ª´ng decoration ƒë·ªÉ k√©o th·∫£ v√† ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc!"
                      : "Ch·ªçn decoration ƒë·ªÉ trang tr√≠ b√°nh c·ªßa b·∫°n"}
                  </span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  {decorations.map((decoration) => {
                    const isSelected = decoration.value in design.decorations;
                    return (
                      <button
                        key={decoration.value}
                        onClick={() => toggleDecoration(decoration.value)}
                        className={`p-3 rounded-lg border text-sm font-medium ${
                          isSelected
                            ? "bg-gradient-to-r from-pink-500 to-yellow-400 text-white"
                            : "bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100"
                        }`}
                      >
                        {decoration.label}
                      </button>
                    );
                  })}
                </div>

                {Object.keys(design.decorations).length > 0 && (
                  <div className="mt-4 pt-4 border-t border-pink-100">
                    <p className="text-xs text-gray-600 mb-2">
                      Selected decorations:
                    </p>
                    <div className="space-y-3">
                      {Object.entries(design.decorations).map(
                        ([decorValue, quantity]) => {
                          const decor = decorations.find(
                            (d) => d.value === decorValue
                          );
                          return (
                            <div
                              key={decorValue}
                              className="bg-pink-50 rounded-lg p-2 space-y-2"
                            >
                              <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                  <span className="text-sm text-pink-700">
                                    {decor?.label || decorValue}
                                  </span>
                                  <button
                                    className="ml-2 px-2 py-0.5 text-xs bg-pink-100 text-pink-700 rounded hover:bg-pink-200"
                                    onClick={() => toggleDecoration(decorValue)}
                                  >
                                    √ó
                                  </button>
                                </div>
                                <div className="flex items-center">
                                  <button
                                    onClick={() =>
                                      updateDecorationQuantity(
                                        decorValue,
                                        quantity - 1
                                      )
                                    }
                                    className="w-6 h-6 flex items-center justify-center bg-pink-100 text-pink-700 rounded hover:bg-pink-200"
                                  >
                                    -
                                  </button>
                                  <span className="mx-2 text-sm text-gray-700 w-6 text-center">
                                    {quantity}
                                  </span>
                                  <button
                                    onClick={() =>
                                      updateDecorationQuantity(
                                        decorValue,
                                        quantity + 1
                                      )
                                    }
                                    className="w-6 h-6 flex items-center justify-center bg-pink-100 text-pink-700 rounded hover:bg-pink-200"
                                  >
                                    +
                                  </button>
                                </div>
                              </div>

                              {/* Scale sliders for each instance */}
                              {Array.from({ length: quantity }, (_, i) => {
                                const decorKey = `${decorValue}_${i}`;
                                const scale = decorationsScales[decorKey] || 1;

                                return (
                                  <div
                                    key={decorKey}
                                    className="pt-1 border-t border-pink-100"
                                  >
                                    <div className="flex justify-between items-center mb-1">
                                      <label className="text-xs text-pink-600">
                                        {decor?.label.split(" ")[0]} #{i + 1} -
                                        K√≠ch th∆∞·ªõc
                                      </label>
                                      <span className="text-xs font-semibold bg-pink-100 px-2 py-0.5 rounded-md text-pink-700">
                                        {Math.round(scale * 100)}%
                                      </span>
                                    </div>
                                    <input
                                      type="range"
                                      min="20"
                                      max="200"
                                      value={scale * 100}
                                      onChange={(e) =>
                                        updateDecorationScale(
                                          decorKey,
                                          Number(e.target.value) / 100
                                        )
                                      }
                                      className="w-full h-2.5 bg-pink-100 rounded-lg appearance-none cursor-pointer accent-pink-500"
                                      style={{
                                        background: `linear-gradient(to right, #ec4899 0%, #ec4899 ${
                                          ((scale * 100 - 20) / 180) * 100
                                        }%, #fce7f3 ${
                                          ((scale * 100 - 20) / 180) * 100
                                        }%, #fce7f3 100%)`,
                                      }}
                                    />
                                  </div>
                                );
                              })}
                            </div>
                          );
                        }
                      )}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Cake Flavors */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
              <h3 className="font-semibold text-gray-800 mb-4">Cake Flavors</h3>
              <div className="flex flex-wrap gap-2">
                {flavors.map((flavor) => (
                  <button
                    key={flavor}
                    onClick={() => toggleFlavor(flavor)}
                    className={`px-3 py-2 rounded-full text-sm font-medium ${
                      selectedFlavors.includes(flavor)
                        ? flavor === "Vanilla"
                          ? "bg-yellow-100 text-yellow-800"
                          : flavor === "Chocolate"
                          ? "bg-amber-100 text-amber-800"
                          : flavor === "Lemon"
                          ? "bg-yellow-100 text-yellow-800"
                          : "bg-red-100 text-red-800"
                        : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                    }`}
                  >
                    {flavor}
                  </button>
                ))}
              </div>
            </div>

            {/* Design Summary */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4 bg-gradient-to-br from-pink-100 to-yellow-100">
              <h3 className="font-semibold text-gray-800 mb-4">
                Design Summary
              </h3>
              <div className="space-y-2">
                <div className="text-sm">
                  <span className="font-medium">Base:</span> {design.shape} -{" "}
                  {design.tiers} {design.tiers > 1 ? "tiers" : "tier"}
                </div>
                <div className="text-sm">
                  <span className="font-medium">Size:</span> {diameter}cm x{" "}
                  {height}cm {design.shape !== "Round" && `x ${width}cm`}
                </div>
                <div className="text-sm">
                  <span className="font-medium">Flavor:</span>{" "}
                  {selectedFlavors.join(", ")}
                </div>
                <div className="text-sm">
                  <span className="font-medium">Frosting:</span>{" "}
                  {design.frosting !== "none" ? design.frosting : "None"}
                </div>
                <div className="text-sm">
                  <span className="font-medium">Topping:</span>{" "}
                  {design.topping !== "none" ? design.topping : "None"}
                </div>
                <div className="text-sm">
                  <span className="font-medium">Decorations:</span>{" "}
                  {Object.entries(design.decorations).length > 0
                    ? Object.entries(design.decorations)
                        .map(([decorValue, quantity]) => {
                          const decoration = decorations.find(
                            (d) => d.value === decorValue
                          );
                          const label = decoration
                            ? decoration.label.split(" ")[0]
                            : decorValue;
                          return `${label} (${quantity})`;
                        })
                        .join(", ")
                    : "None"}
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-6 text-center text-xs text-gray-500">
          ¬© 2025 CakeStory. All rights reserved.
        </div>
      </div>
    </div>
  );
};

export default CakeDesign;
